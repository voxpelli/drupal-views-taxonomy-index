<?php
// $Id$

/**
 * @file
 * Module with a taxonomy views filter
 */

/**
 * Implementation of hook_theme().
 */
function viewstaxonomyindex_theme($existing, $type, $theme, $path) {
  return array(
    'viewstaxonomyindex' => array(
      'arguments' => array('terms' => NULL),
    ),
  );
}

function theme_viewstaxonomyindex($terms) {
  return theme('links', $terms);
}

/**
 * Implementation of hook_menu().
 */
function viewstaxonomyindex_menu() {
  $items = array();

  $items['admin/build/views/viewstaxonomyindex'] = array(
    'title'            => 'Taxonomy Index',
    'description'      => 'Configure on which new the Taxonomy index should show.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('viewstaxonomyindex_admin_settings_form'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer views'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'viewstaxonomyindex.admin.inc',
  );

  return $items;
}

function viewstaxonomyindex_preprocess_views_view(&$vars) {
  static $validator_types;

  $view = $vars['view'];

  if (empty($view->argument)) {
    return;
  }

  $setting = variable_get('viewstaxonomyindex_views_'. $view->name, array());
  if (!isset($setting[$view->current_display]) || !$setting[$view->current_display]) {
    return;
  }

  if (!isset($validator_types)) {
    $validator_types = array('taxonomy_term');
    $validator_names = array();

    $plugins = _views_fetch_plugin_data('argument validator');
    foreach ($plugins as $key => $value) {
      if (isset($value['viewstaxonomyindex_indexable']) && $value['viewstaxonomyindex_indexable']) {
        $validator_types[] = $key;
      }
      if (isset($value['viewstaxonomyindex_term_name']) && $value['viewstaxonomyindex_term_name']) {
        $validator_names[] = $key;
      }
    }
  }

  $arg_vocab  = NULL;
  $arg_parent = NULL;
  $arg_tid    = TRUE;

  $original_view = views_get_view($view->name);
  $original_view->set_display($view->current_display);
  $original_view->set_arguments($view->args);
  $original_view->set_items_per_page(0);

  foreach (array_reverse($view->argument) as $key => $arg) {
    $pos = $arg->position;
    $wildcard = empty($arg->options['wildcard']) ? '*' : $arg->options['wildcard'];
    if (isset($original_view->args[$pos])) {
      if ($original_view->args[$pos] == $wildcard) {
        unset($original_view->args[$pos]);
      }
      else {
        break;
      }
    }
  }

  $all_args = TRUE;
  $above_args = array();

  foreach ($view->argument as $key => $arg) {
    if (is_a($arg, 'views_handler_argument_term_node_tid')) {
      $local_view = $original_view->clone_view();

      $vocabs = array();
      $pos    = $arg->position;
      $wildcard = empty($arg->options['wildcard']) ? '*' : $arg->options['wildcard'];
      $local_args = $above_args + $original_view->args;

      if (in_array($arg->options['validate_type'], $validator_types) && !empty($arg->options['validate_argument_vocabulary'])) {
        //TODO: Make validate_argument_vocabulary configurable
        foreach ($arg->options['validate_argument_vocabulary'] as $key => $value) {
          if ($value) {
            $vocabs[] = $key;
          }
        }
      }

      if (($arg->options['validate_type'] === 'taxonomy_term' && $arg->options['validate_argument_type'] !== 'tid') || in_array($arg->options['validate_type'], $validator_names)) {
        $arg_tid = FALSE;
      }

      if (empty($vocabs)) {
        if ($arg_vocab) {
          $vocabs[] = $arg_vocab;
        }
        else {
          continue;
        }
      }

      foreach ($vocabs as $vid) {
        $tags = empty($arg_parent) ? taxonomy_get_tree($vid) : taxonomy_get_tree($vid, $arg_parent, -1, 1);

        if (empty($tags)) {
          continue;
        }

        $tags_local = array();

        if (module_exists('i18ntaxonomy')) {
          $tags_local = array();
          foreach ($tags as $key => $tag) {
            $tags_local[$key] = clone $tag;
          }
          $tags_local = i18ntaxonomy_localize_terms($tags_local);
        }

        $local_view->set_arguments($local_args);
        if (count($original_view->args) - 1 > $pos) {
          $local_view->args[$pos] = $wildcard;
        }
        elseif ($all_args) {
          $local_view->set_arguments(array());
        }
        else {
          unset($local_view->args[$pos]);
        }
        $url = $local_view->get_url();
        $links = array(
          'all' => array(
            'href'  => $url,
            'title' => $arg->options['wildcard_substitution'],
            'alias' => TRUE,
            'attributes' => array('class' => ($url == $_GET['q']) ? 'active' : ''),
          ),
        );

        $local_view->set_arguments($local_args);
        foreach ($tags as $key => $tag) {
          $local_view->args[$pos] = $arg_tid ? $tag->tid : drupal_strtolower($tag->name);
          ksort($local_view->args);

          $url = $local_view->get_url();
          $links[$key] = array(
            'href'  => $url,
            'title' => isset($tags_local[$key]) ? $tags_local[$key]->name : $tag->name,
            'alias' => TRUE,
            'attributes' => array('class' => ($url == $_GET['q']) ? 'active' : ''),
          );
        }
        $vars['header'] .= theme('viewstaxonomyindex', $links);
      }

      if (isset($original_view->args[$pos]) && $original_view->args[$pos] !== $wildcard) {
        $all_args = FALSE;
        $above_args[$pos] = $original_view->args[$pos];
      }
      else {
        $above_args[$pos] = $wildcard;
      }
    }
    else if (is_a($arg, 'views_handler_argument_vocabulary_vid')) {
      $tmp = $arg->get_value();
      if (!empty($tmp)) {
        $arg_vocab = $tmp;
      }
    }
    else if (is_a($arg, 'views_handler_argument_term_node_tid_depth')) {
      $tmp = $arg->get_value();
      if (!empty($tmp)) {
        $arg_parent = $tmp;
      }
    }
  }

  return;
}